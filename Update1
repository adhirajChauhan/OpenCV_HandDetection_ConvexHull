import cv2
import numpy as np
import math

video = cv2.VideoCapture(0)
kernel = np.ones((2, 2), np.uint8)

while True:
    
    (ret, frame) = video.read()

###############################################################################

    roi =frame[100:300, 100:300]
    cv2.rectangle(roi,(100,100), (300,300),(0,255,0), 0)


###############################################################################

    gray = cv2.cvtColor(roi,cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (3, 3), 0)
    gray = cv2.medianBlur(gray, 3)
    #crcb = cv2.cvtColor(frame, cv2.COLOR_BGR2YCrCb)
    retval, thresh = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY)

    thresh = cv2.morphologyEx(thresh, cv2.MORPH_GRADIENT, kernel)
    thresh = cv2.dilate(thresh, kernel, iterations=3)
    #newFrame = np.array(thresh)

    contours, hierarchy = cv2.findContours(
        thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    if len(contours) > 0:
        #cv2.drawContours(roi, contours, -1, (0, 255, 0), 2)
        # find the biggest countour (c) by the area
        c = max(contours, key=cv2.contourArea)
        x, y, w, h = cv2.boundingRect(c)

        # draw the biggest contour (c) in green
        #cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
        
    ###############################################################################
    hull_list = []
    for i in range(len(contours)):
        hull = cv2.convexHull(contours[i])
        hull_list.append(hull)

        color = (255, 255, 0)
        cv2.drawContours(roi, hull_list, i, color,2,1)
    ###############################################################################

    ###############################################################################
#find contour of max area(hand)
    cnt = max(contours, key=lambda x: cv2.contourArea(x))

#approx the contour a little
    epsilon = 0.0005*cv2.arcLength(cnt, True)
    approx = cv2.approxPolyDP(cnt, epsilon, True)

#make convex hull around hand
    hull = cv2.convexHull(cnt)

    #define area of hull and area of hand
    areahull = cv2.contourArea(hull)
    areacnt = cv2.contourArea(cnt)

#find the percentage of area not covered by hand in convex hull
    arearatio = ((areahull-areacnt)/areacnt)*100

    #find the defects in convex hull with respect to hand
    hull = cv2.convexHull(approx, returnPoints=False)
    defects = cv2.convexityDefects(approx, hull)

    # l = no. of defects
    l = 0

    #code for finding no. of defects due to fingers
    for i in range(defects.shape[0]):
        s, e, f, d = defects[i, 0]
        start = tuple(approx[s][0])
        end = tuple(approx[e][0])
        far = tuple(approx[f][0])
        pt = (100, 180)

        # find length of all sides of triangle
        a = math.sqrt((end[0] - start[0])**2 + (end[1] - start[1])**2)
        b = math.sqrt((far[0] - start[0])**2 + (far[1] - start[1])**2)
        c = math.sqrt((end[0] - far[0])**2 + (end[1] - far[1])**2)
        s = (a+b+c)/2
        ar = math.sqrt(s*(s-a)*(s-b)*(s-c))

        #distance between point and convex hull
        d = (2*ar)/a

        # apply cosine rule here
        angle = math.acos((b**2 + c**2 - a**2)/(2*b*c)) * 57

        # ignore angles > 90 and ignore points very close to convex hull(they generally come due to noise)
        if angle <= 90 and d > 30:
            l += 1
            cv2.circle(roi, far, 3, [255, 0, 255], -1)

        #draw lines around hand
        cv2.line(roi, start, end, [0, 255, 0], 2)

    l += 1


    ###############################################################################

        


    cv2.imshow("Capturing", frame)
    #cv2.imshow("CrCb",crcb)
    cv2.imshow("gray", gray)
    cv2.imshow("thresh", thresh)
    #cv2.waitKey(0)
        
    key = cv2.waitKey(1)

    if key == ord('q'):
        break

video.release()
cv2.destroyAllWindows()
